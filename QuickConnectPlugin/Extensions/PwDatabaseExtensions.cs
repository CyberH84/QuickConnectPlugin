using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using KeePassLib;

namespace QuickConnectPlugin.Extensions {

    public static class PwDatabaseExtensions {

        /// <summary>
        /// Gets a collection of custom fields provided by the KPEntryTemplates plugin.
        /// </summary>
        /// <param name="pwDatabase"><param>
        /// <returns></returns>
        public static ICollection<String> GetCustomFieldsFromKPTemplates(this PwDatabase pwDatabase) {
            var fields = new Collection<String>();
            foreach (var pwEntry in pwDatabase.RootGroup.GetEntries(true)) {
                foreach (var str in pwEntry.Strings.GetKeys()) {
                    if (str.StartsWith("_etm_options_")) {
                        var templateFieldName = str.Substring("_etm_options_".Length);
                        if (!fields.Contains(templateFieldName)) {
                            fields.Add(templateFieldName);
                        }
                    }
                }
            }
            return fields;
        }

        public static ICollection<String> GetAllFields(this PwDatabase pwDatabase) {
            return pwDatabase.GetAllFields(false);
        }

        public static ICollection<String> GetAllFields(this PwDatabase pwDatabase, bool includeCustomFieldsFromKPTemplates) {
            var fields = new Collection<String>();
            foreach (var pwEntry in pwDatabase.RootGroup.GetEntries(true)) {
                foreach (var str in pwEntry.Strings.GetKeys()) {
                    // Filter template header fields generated by KPEntryTemplates plugin.
                    // https://github.com/cristianst85/QuickConnectPlugin/issues/10
                    if (!fields.Contains(str) && !str.StartsWith("_etm_")) {
                        fields.Add(str);
                    }
                }
            }
            if (includeCustomFieldsFromKPTemplates) {
                foreach (var customField in pwDatabase.GetCustomFieldsFromKPTemplates()) {
                    if (!fields.Contains(customField)) {
                        fields.Add(customField);
                    }
                }
            }
            return fields;
        }
    }
}
